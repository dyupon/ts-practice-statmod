library(magrittr)
load.example('parrots') %>% grayscale %>% as.matrix -> gray_parrots
gray_parrots %>% . + rnorm(length(.), sd = 0.8) -> noisy_parrots
gray_parrots %>% .[] + rnorm(length(.[]), sd = 0.8) -> noisy_parrots
?"%>%"
gray_parrots %>% `+`(rnorm(length(.), sd = 0.8)) -> noisy_parrots
dim(noisy_parrots)
768 / 8
512 / 8
noisy_parrots %>% ssa(kind = "2d-ssa", L = c(96, 64)) -> parrots_ssa
noisy_parrots %>% ssa(kind = "2d-ssa", L = c(96, 64), svd.method = "eigen") -> parrots_ssa
parrots_ssa %>% plot(type = "vectors", idx = 1:50, layout = c(10, 5), plot.contrib = FALSE)
parrots_ssa %>% reconstruct(groups = list(Noise = c(38:40, 42, 47:50))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Noise = c(29:30, 33:34, 38:40, 42:50))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image = c(1:28, 31:32, 35:37, 41))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image = c(1:28))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image = c(1:50[-c(29, 30, 33, 34, 41, 44:46)]))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image = c(1:50))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image = c(1:10))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image = c(1:30))) %>% plot
parrots_ssa %>% reconstruct(groups = list(Image1 = 1:10, Image2 = 1:20, Image3 = 1:30, Image4 = 1:40, Image5 = 1:50)) %>% plot
summary(parrots_ssa)
?"%>%"
shiny::runApp('test')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(magrittr)
library(Rssa)
library(ggplot2)
X <- read.csv("short_ts.csv")
typeof(X)
is.ts(X)
X
install.packages("measures")
?vforecast
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(Rssa)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(Rssa)
N = 100
X <- 5 + 3*(1:N) + 0.6 * exp(0.2 * 1:N) * cos(2*pi / 3 * 1:N)
X %>% ssa(L = 5) -> x_ssa
x_ssa %>% lrr(groups = list(1:4)) %T>% roots %>% plot
X %>% ssa(L = 50) %>% lrr(groups = list(1:4)) %T>% plot %>% roots -> r
X %>% ssa(L = 50) %>% parestimate(groups = list(1:4), method = "esprit") %T>% print(.[["roots"]]) %>% plot
r
r[1:4]
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(Rssa)
N = 100
X <- 5 + 3*(1:N) + 0.6 * exp(0.2 * 1:N) * cos(2*pi / 3 * 1:N)
X %>% ssa(L = 5) -> x_ssa
x_ssa %>% lrr(groups = list(1:4)) %T>% roots %>% plot
X %>% ssa(L = 50) %>% lrr(groups = list(1:4)) %T>% plot %>% roots -> r
r %>% sapply(function(root) root^(1:4)) -> root_mat
X %>% ssa(L = 50) %>% parestimate(groups = list(1:4), method = "esprit") %T>% print(.[["roots"]]) %>% plot
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(Rssa)
N = 100
X <- 5 + 3*(1:N) + 0.6 * exp(0.2 * 1:N) * cos(2*pi / 3 * 1:N)
X %>% ssa(L = 5) -> x_ssa
x_ssa %>% lrr(groups = list(1:4)) %T>% roots %>% plot
X %>% ssa(L = 50) %>% lrr(groups = list(1:4)) %T>% plot %>% roots -> r
r[1:4] %>% sapply(function(root) root^(1:4)) -> root_mat
X %>% ssa(L = 50) %>% parestimate(groups = list(1:4), method = "esprit") %T>% print(.[["roots"]]) %>% plot
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
?Rssa::grouping.auto
?roots
source('C:/Users/Nikita/Desktop/Parexel HW/solution.R')
summary(iris)
summary(iris)
?broom::tidy
tidy(iris)
broom::tidy(iris)
source('C:/Users/Nikita/Desktop/Parexel HW/solution.R')
source('C:/Users/Nikita/Desktop/Parexel HW/solution.R')
read.table("~/iris.data") -> iris_data
read.table("../iris.data") -> iris_data
x <- 9154930323313095281
x
x + 0:100
print(x)
as.character(x)
as.character(x + 0:100)
x <- 9154930323313095281
print(x, digits = 16)
install.packages("Rmpfr")
library(Rmpfr)
?mpfr
x <- mpfr(9154930323313095281, 1024)
x
x <- mpfr(9154930323313095281, 2048)
x
x <- mpfr(9154930323313095281, 4096)
x
x <- mpfr(9154930323313095281, 9192)
x
install.packages("int64")
install.packages("stargazer")
iris
library(stargazer)
stargazer::stargazer(iris)
?stargazer
stargazer::stargazer(iris, type=)
stargazer::stargazer(iris, type = "text")
stargazer::stargazer(iris, type = "text", summary = FALSE)
shiny::runApp('test')
install.packages("tsibble")
install.packages("lubridate")
shiny::runApp('test')
update.packages()
update.packages("openssl")
install.packages("openssl")
install.packages("openssl")
install.packages("curl")
install.packages("Rcpp")
warnings()
warnings()
install.packages(c("TTR", "digest", "httpuv", "lattice", "nlme"))
install.packages("Mcomp")
Mcomp::M1
Mcomp::M1$YAF2
Mcomp::M1$YAM3
Mcomp::M1$YAF6
Mcomp::M1$YAF7
Mcomp::M1$YAF8
install.packages(c("rdatamarket", "Quandl"))
install.packages("expsmooth")
library(TSA)
install.packages("shinyAce")
shiny::runApp(system.file("examples/01-basic", package="shinyAce"))
shiny::runApp(system.file("examples/03-knitr", package="shinyAce"))
install.packages("rticles")
shiny::runApp(system.file("examples/03-knitr", package="shinyAce"))
?fma::airpass
seasonplot(airpass)
tsdisplay(airpass)
autoplot(forecast::gas)
forecast::gglagplot(fma::airpass)
forecast::ggmonthplot(fma::airpass)
forecast::ggsubseriesplot(fma::airpass)
?outer
?ts
?window
install.packages("gridExtra")
spec.pgram(fma::airpass, log = "no")
?spec.pgram(fma::airpass, log = "no")
spec.pgram(fma::airpass, log = "no", plot = FALSE) -> sp
sp
library(ggplot2)
df <- data.frame(freq = sp$freq, spec = sp$spec)
ggplot(df) + geom_line()
ggplot(df, aes(freq, spec)) + geom_line()
ggplot(df, aes(freq, spec)) + geom_line(size = 1.2)
ggplot(df, aes(freq, spec)) + geom_line(size = 1)
ggplot(df, aes(freq, spec)) + geom_line(size = 1) + labs(x = "Frequency", y = "Amplitude")
?spec.pgram
?fma::airpass
log_airpass <- log(fma::airpass)
time <- 1:length(log_airpass)
trend_lm <- lm(log_airpass ~ time)
trend_lm
trend_lm$fitted.values
time(log_airpass)
time <- time(log_airpass)
trend_lm <- lm(log_airpass ~ time)$fitted.values
autoplot(trend_lm)
?ts
?time
trend_lm <- log_airpass
window(trend_lm, 1, 144) <- lm(log_airpass ~ time)$fitted.values
window(trend_lm, 1, 12) <- lm(log_airpass ~ time)$fitted.values
trend_lm[] <- lm(log_airpass ~ time)$fitted.values
autoplot(trend_lm)
library(foreach)
library(ggplot2)
autoplot(trend_lm)
plot(trend_lm)
?broom::tidy
?sprintf
library(forecast)
library(magrittr)
install.packages() %>% as.data.frame() %>% pull(Package) %>% as.character
installed.packages() %>% as.data.frame() %>% pull(Package) %>% as.character
library(dplyr)
installed.packages() %>% as.data.frame() %>% pull(Package) %>% as.character
library(installr)
AirPassengers %>% time
library(magrittr)
AirPassengers %>% time
?window
AirPassengers %>% window(end = 1958)
AirPassengers %>% window(end = 1959)
AirPassengers %>% window(end = 1960)
AirPassengers
library(dplyr)
library(tidyr)
AirPass[1:(12 * 8)]
AirPassengers[1:(12:8)]
AirPassengers[1:(12*8)]
AirPassengers[(12*8 + 1):144]
AirPassengers
12*8
AirPassengers %>% time %>% .[96]
AirPassengers %>% window(., end=time(.)[96])
AirPassengers %>% window(., start=time(.)[97])
head(1:10)
AirPassengers %>% time %>% tail(24)
c(2, 1) %>% diff
2 %>% -1
3 %>% -1
AirPassengers %>% time %>% tail(24) %>% head(1) %>% -1
AirPassengers %>% time %>% tail(24) %>% head(1)
AirPassengers %>% time %>% tail(24)
AirPassengers %>% time %>% tail(25) %>% head(1)
AirPassengers %>% time %>% tail(25) %>% first
AirPassengers %>% time %>% tail(25) %>% first -> train_end
AirPassengers %>% window(end = train_end)
library(forecast)
AirPassengers %>% log %>% ggtsdisplay()
AirPassengers %>% window(end = train_end) -> ap
library(Rssa)
ap %>% ssa(L=60) -> ap_ssa
ap_ssa %>% plot(type = "values")
ap_ssa %>% plot(type = "paired")
ap_ssa %>% plot(type = "paired", idx = 1:20)
ap_ssa %>% plot(type = "vectors", idx = 1:20)
ap_ssa %>% plot(type = "wcor", idx = 1:20)
ap_ssa %>% plot(type = "wcor", groups = 1:20 %>% as.list)
ap_ssa %>% plot(type = "wcor", groups = 1:30 %>% as.list)
ap_ssa %>% plot(type = "wcor", groups = 1:24 %>% as.list)
ap_ssa %>% plot(type = "wcor", groups = 1:50 %>% as.list)
?rforecast
ap_ssa %>% rforecast(groups = list(1:18), len = 24, only.new = FALSE) %>% autoplot
?auto.arima
forecast()
?forecast()
?bforecast
AirPassengers %>% window(end = train_end) -> ap
ap %>% auto.arima(stepwise = FALSE) -> ap_sarima
ap_sarima
checkresiduals(ap_sarima)
ap_sarima %>% forecast(h = 24, level = c(95, 99))
ap_sarima %>% forecast(h = 24, level = c(95, 99)) %>% autoplot
ap %>% ets %>% forecast(h = 24, level = c(95, 99)) %>% autoplot
autoplot(ap_sarima)
ap_ets <- ap %>% ets
ap_ets
autoplot(ap_ets)
cbind('Residuals' = residuals(ap_ets),
'Forecast errors' = residuals(ap_ets,type='response')) %>%
autoplot(facet=TRUE) + xlab("Year") + ylab("")
library(ggplot2)
cbind('Residuals' = residuals(ap_ets),
'Forecast errors' = residuals(ap_ets,type='response')) %>%
autoplot(facet=TRUE) + xlab("Year") + ylab("")
AirPassengers %>% log %>% time %>% tail(24) %>% first -> tbegin
AirPassengers %>% log %>% window(start = tbegin) -> ap_test
ap %>% ets %>% forecast(h = 24, level = c(95, 99)) %>% autoplot %>% autolayer(ap_test, series = "Real Data")
ap %>% autoplot() %>% autolayer(ap)
forecast::autolayer
?forecast::autolayer
ap %>% autoplot() + autolayer(ap)
ap %>% ets %>% forecast(h = 24, level = c(95, 99)) %>% autoplot() + autolayer(ap_test, series = "Real Data")
ap_ets <- ap %>% log %>% ets
ap %>% log %>% auto.arima(stepwise = FALSE) -> ap_sarima
ap_ets %>% forecast(h = 24, level = c(95, 99)) %>% autoplot() + autolayer(ap_test, series = "Real Data")
ap_ets %>% forecast(h = 24, level = c(95, 99)) -> ap_ets_fc
ap_ets_fc %>% autoplot()
ap_ets_fc %>% autoplot() + autolayer(ap_ets_fc$mean, series = "Forecast") + autolayer(ap_test, series = "Real Data")
ap_ets_fc %>% autoplot(size = 1) + autolayer(ap_ets_fc$mean, series = "Forecast") + autolayer(ap_test, series = "Real Data")
ap_ets_fc %>% autoplot(size = 1.2) + autolayer(ap_ets_fc$mean, series = "Forecast") + autolayer(ap_test, series = "Real Data")
ap_ets_fc %>% autoplot() + autolayer(ap_ets_fc$mean, series = "Forecast", size = 1.2) + autolayer(ap_test, series = "Real Data")
ap_ets_fc %>% autoplot() + autolayer(ap_ets_fc$mean, series = "Forecast", size = 1.2) + autolayer(ap_test, series = "Real Data", size = 1.2)
ap_ets_fc %>% autoplot() + autolayer(ap_ets_fc$mean, series = "Forecast", size = 1.2) + autolayer(ap_test, series = "Real Data", size = 1)
ap_ets_fc %>% autoplot() + autolayer(ap_ets_fc$mean, series = "Forecast", size = 1) + autolayer(ap_test, series = "Real Data", size = 1)
ap_ssa <- ap %>% ssa(L=60)
ap_ssa_fc <- ap_ssa %>% forecast(groups = list(1:18), method = "recurrent", h = 24, level = c(95, 99))
ap_ssa_fc %>% autoplot() + autolayer(ap_ssa_fc$mean, series = "Forecast", size = 1) + autolayer(ap_test, series = "Real Data", size = 1)
ap_ssa <- ap %>% log %>% ssa(L=60)
ap_ssa_fc <- ap_ssa %>% forecast(groups = list(1:18), method = "recurrent", h = 24, level = c(95, 99))
ap_ssa_fc %>% autoplot() + autolayer(ap_ssa_fc$mean, series = "Forecast", size = 1) + autolayer(ap_test, series = "Real Data", size = 1)
?vforecast()
ap_ssa %>% reconstruct(groups = list(1:18)) %>% checkresiduals
ap_ets %>% checkresiduals()
ap_ssa %>% checkresiduals
ap_ssa %>% checkresiduals(groups = list(1:18))
ap_ssa %>% reconstruct(groups = list(1:18)) %>% checkresiduals
ap_ssa %>% reconstruct(groups = list(1:18)) %>% residuals %>% autoplot()
?tsCV()
rmse <- sapply(
list(ETS = ap_ets_fc, SSA_R = ap_ssa_fc),
function(x) sqrt(mean((x - airpass_test)^2))
)
rmse <- sapply(
list(ETS = ap_ets_fc, SSA_R = ap_ssa_fc),
function(x) sqrt(mean((x - ap_test)^2))
)
rmse <- sapply(
list(ETS = ap_ets_fc, SSA_R = ap_ssa_fc),
function(x) sqrt(mean((unlist(x) - ap_test)^2))
)
list(ETS = ap_ets_fc, SSA = ap_ets_fc) -> fc_list
sapply(fc_list, function(x) x^2)
lapply(fc_list, function(x) x^2)
sapply(1:length(fc_list), function(i) fc_list[[i]]^2)
fc_list$ETS
lapply(fc_list, function(x) (x$mean)^2)
sapply(fc_list, function(x) sqrt(mean((x$mean - ap_test)^2)))
ap_ets$fit
ap_ssa %>% forecast(h = 24, method = "bootstrap-recurrent")
ap_ssa %>% bforecast(groups = list(1:18), h = 24, method = "recurrent")
ap_ssa %>% bforecast(groups = list(1:18), len = 24, method = "recurrent") -> ap_ssa_bfc
ap_ssa %>% bforecast(groups = list(1:18), len = 24, method = "recurrent") %>% .[,2] -> ap_ssa_bfc
ap_ssa %>% forecast(groups = list(1:18), h = 24, method = "recurrent") -> ap_ssa_rfc
ap_ssa %>% forecast(groups = list(1:18), h = 24, method = "recurrent") %$% fitted -> ap_ssa_rfc
ap_ssa %>% forecast(groups = list(1:18), h = 24, method = "recurrent") ap_ssa_rfc
ap_ssa %>% forecast(groups = list(1:18), h = 24, method = "recurrent") -> ap_ssa_rfc
autoplot(ap_ssa_rfc) + autolayer(ap_ssa_rfc, series = "rforecast") + autolayer(ap_ssa_bfc, series = "bforecast")
autoplot() + autolayer(ap_ssa_rfc, series = "rforecast") + autolayer(ap_ssa_bfc, series = "bforecast")
autoplot(NULL) + autolayer(ap_ssa_rfc, series = "rforecast") + autolayer(ap_ssa_bfc, series = "bforecast")
autoplot(ap_ssa_rfc, series = "rforecast") + autolayer(ap_ssa_bfc, series = "bforecast")
AirPassengers %>% log %>% window(end = 1958.917) -> ap
ap %>% ssa(L = 60) -> ap_ssa
AirPassengers %>% log %>% window(start = 1959) -> ap_test
ap_grp <- list(1:18)
ap_ssa %>% rforecast(groups = ap_grp, len = 24) -> ap_rfc
ap_ssa %>% bforecast(groups = ap_grp, len = 24) %>% .[,2] -> ap_bfc
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent", bootstrap = FALSE) %$% fitted -> ap_fc
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent", bootstrap = TRUE) %$% fitted -> ap_fcb
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent") %$% fitted -> ap_fcd
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent", bootstrap = TRUE, R = 100) %$% fitted -> ap_fcb
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent", bootstrap = TRUE, R = 100) -> ap_fcb
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent") -> ap_fcd
ap_ssa %>% forecast(groups = ap_grp, h = 24, method = "recurrent", bootstrap = FALSE) -> ap_fc
autoplot(ap_fc) + autolayer(ap_fc, series = "Forecast (bootstrap = FALSE)") + autolayer(ap_fcb, series = "Forecast (bootstrap = TRUE)") + autolayer(ap_fcd, series = "Forecast") + autolayer(ap_rfc, series = "Rforecast") + autolayer(ap_bfc, series = "Bforecast")
ap_fc$mean
ap_fcb$mean
ap_fcd$mean
ap_bfc
ap_rfc
ap_ssa %>% forecast(groups = ap_grp, len = 24, method = "recurrent", bootstrap = TRUE, R = 100) -> ap_fcb
ap_fcb$mean
ap_rfc
n <- 100
x <- 1:n
s <- x^3 - 2*x^2 + 7*x + 5 + rnorm(n)
s %>% as.ts %>% autoplot
s <- 0.2 8 x^3 - 2*x^2 + 7*x + 5 + rnorm(n)
s <- 0.2*x^3 - 2*x^2 + 7*x + 5 + rnorm(n)
s <- 0.2 8 x^3 - 2*x^2 + 7*x + 5 + rnorm(n)
s %>% as.ts %>% autoplot
s <- 0.2 * x^3 - 140*x^2 + 19*x + 5 + rnorm(n)
s %>% as.ts %>% autoplot
s <- (x - 15)*(x - 45) * (x - 75)
s %>% as.ts %>% autoplot
s <- 0.2 * (x - 15)*(x - 25) * (x - 45) * (x - 65) * (x - 75) * (x - 85) * (x - 95)
s %>% as.ts %>% autoplot
s <- 0.2 * (x - 15)*(x - 25) * (x - 45) * (x - 65) * (x - 75) * (x - 95)
s %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15)*(x - 25) * (x - 45) * (x - 65) * (x - 95)
s %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) -> s %>% as.ts %>% autoplot
0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) -> s %>% as.ts %>% autoplot
0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) %>% as.ts %>% autoplot
( 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) ) %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 3 * rnorm(n)
s %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 10 * rnorm(n); s %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 1000 * rnorm(n); s %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 10000 * rnorm(n); s %>% as.ts %>% autoplot
s <- 0.2 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 1e6 * rnorm(n); s %>% as.ts %>% autoplot
?cadzow
s %>% ssa(L = n / 2) %>% cadzow -> s_cadzow
s %>% ssa(L = n / 2) %>% cadzow(rank = 7) -> s_cadzow
s %>% as.ts %>% autoplot() + autolayer(s_cadzow %>% as.ts, series = "Cadzow")
s %>% ssa(L = n / 2) %>% cadzow(rank = 5) -> s_cadzow
s %>% ssa(L = n / 2) %>% cadzow(rank = 6) -> s_cadzow
s %>% as.ts %>% autoplot() + autolayer(s_cadzow %>% as.ts, series = "Cadzow")
s <- 0.02 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 1e4 * rnorm(n); s %>% as.ts %>% autoplot
s <- 0.002 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) + 1e4 * rnorm(n); s %>% as.ts %>% autoplot
s <- 0.002 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) * (x - 120) + 1e4 * rnorm(n); s %>% as.ts %>% autoplot
s <- 1e-5 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) * (x - 120) + 1e4 * rnorm(n); s %>% as.ts %>% autoplot
s <- 1e-5 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) * (x - 120) + 1e3 * rnorm(n); s %>% as.ts %>% autoplot
s <- 1e-5 * x * (x - 15) * (x - 45) * (x - 65) * (x - 95) * (x - 120) + 1e4 * rnorm(n); s %>% as.ts %>% autoplot
s %>% ssa(L = n / 2) %>% cadzow(rank = 7) -> s_cadzow
s %>% as.ts %>% autoplot() + autolayer(s_cadzow %>% as.ts, series = "Cadzow")
?seq
set.seed(3)
N <- 60
L <- 30
K <- N - L + 1
alpha <- 0.1
sigma <- 0.1
signal <- cos(2*pi * seq_len(N) / 10)
x <- signal + rnorm(N, sd = sigma)
weights <- rep(alpha, K)
weights[seq(1, K, L)] <- 1
salpha <- ssa(x, L = L,
column.oblique = "identity",
row.oblique = weights)
calpha <- cadzow(salpha, rank = 2)
cz <- cadzow(ssa(x, L = L), rank = 2)
print(mean((cz - signal)^2))
print(mean((calpha - signal)^2))
x %>% as.ts %>% autoplot() + autolayer(calpha %>% as.ts, series = "Cadzow") + autolayer(cz %>% as.ts, series = "Weighted Cadzow")
??"ma"
??"ma()"
??"moving average"
signal %>% ma(order = 10)
knitr::opts_chunk$set(echo = TRUE)
library(Rssa)
library(ggplot2)
library(forecast)
library(magrittr)
library(dplyr)
library(tidyr)
x <- 1:100
s <- 1e-4 * (x + 10) * (x - 50) * (x - 120)
f <- s + rnorm(100)
z <- f %>% ma(order = 10) %>% as.ts
f %>% as.ts %>% autoplot() + autolayer(s %>% as.ts, "Trend") + autolayer(z, series = "Filtered")
knitr::opts_chunk$set(echo = TRUE)
library(Rssa)
library(ggplot2)
library(forecast)
library(magrittr)
library(dplyr)
library(tidyr)
x <- 1:100
s <- 1e-4 * (x + 10) * (x - 50) * (x - 120)
f <- s + rnorm(100)
z <- f %>% ma(order = 10) %>% as.ts
f %>% as.ts %>% autoplot() + autolayer(s %>% as.ts, "Trend") + autolayer(z, series = "Filtered")
f %>% as.ts %>% autoplot() + autolayer(s %>% as.ts, "Trend")
?diff
?mean
?runmed
library(installr)
?installr
install.python()
install.conda()
install.packages("reticulate")
library(reticulate)
reticulate::conda_version()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
has_devel()
#> '/Library/Frameworks/R.framework/Resources/bin/R' --vanilla CMD SHLIB foo.c
#>
#> clang -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
#>   -I/usr/local/include -I/usr/local/include/freetype2 -I/opt/X11/include
#>   -fPIC  -Wall -mtune=core2 -g -O2  -c foo.c -o foo.o
#> clang -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup
#>   -single_module -multiply_defined suppress -L/usr/local/lib -o foo.so foo.o
#>   -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework
#>   -Wl,CoreFoundation
install.packages("memoise")
install.packages("purrr")
library(purrr)
?partial()
?lapply(list, function)
?lapply
?do.call
l <- list(A = 3, B = 5, C = 'd')
names(l)
names(l) <- c("X", "Y", "Z")
l
l <- NULL
f <- function(a, b) is.null(b)
f(3)
f <- function(a, b) is.null(b = NULL)
f <- function(a, b = NULL) is.null(b)
f(3)
f(3, 5)
f(3, NULL)
which.min(sample.int(10, 10))
x <- sample.int(10, 10)
x
x <- sample.int(10, 10)
x
which.min(x)
?discard
?compact
chapter_data <- data.frame(chnum = c(rep(1, 26), rep(2, 20), rep(3, 9)), sectnum = c(1:26, 1:20, 1:9), text = character(26+20+9))
View(chapter_data)
write.csv(chapter_data, file="chdata.csv")
setwd("~/ts-practice-statmod")
write.csv(chapter_data, file="chdata.csv")
library(readr)
chdata <- read_csv("chdata.csv")
View(chdata)
?file.create
file.create(paste0("ch", chnum, "-sect", sectnum, "-", text, ".tex"))
file.create(paste0("ch", chdata$chnum, "-sect", chdata$sectnum, "-", chdata$text, ".tex"))
chdata$filename <- paste0("ch", chdata$chnum, "-sect", chdata$sectnum, "-", chdata$text, ".tex")
chdata$filename <- paste0("ch", chdata$chnum, "-sect", ifelse(chdata$sectnum < 10, "0", ""), chdata$sectnum, "-", chdata$text, ".tex")
file.create(chdata$filename)
df <- data.frame(cmd = paste0("\include{", chdata$filename, "}"))
df <- data.frame(cmd = paste0("\\include{", chdata$filename, "}"))
View(df)
write.csv(df, file="cmd.csv")
?file.create
?file
write.csv(chdata, file="chdata.csv")
shiny::runApp('~/test')
